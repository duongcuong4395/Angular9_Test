install command line for angular(last version)
I. Create App and test Form.
    let’s create an Angular application:
    1. ng new App_Name --create-application=false --enableIvy=true --strict
    Note: 
        --create-application=false  will tell the CLI to only generate workspace files. This will help us better organize our code when we need to have more than one app and multiple libraries.
        --strict will               add stricter rules to enforce more TypeScript typing and code cleanliness.       
    2. enable enableIvy
        Go to file tsconfig.json
        add:
            "angularCompilerOptions": {
                "fullTemplateTypeCheck": true,
                "strictInjectionParameters": true,
                "enableIvy": true
            }
    3. let’s add a new app.
        ng generate application App_Name

    4. install bootstrap and ng-bootstrap
        npm install bootstrap @ng-bootstrap/ng-bootstrap

    5. Another improvement on Angular 9 is i18n (internationalization). Previously, developers would need to run a full build for every locale in an app. Angular 9 instead lets us build an app once and generate all i18n files in a post-build process, significantly reducing build time. Since ng-bootstrap has a dependency on i18n, we’ll add the new package to our project
        ng add @angular/localize
    6. add the Bootstrap theme to our app’s styles.scss
        @import "~bootstrap/scss/bootstrap";
    7. include NgbModule and ReactiveFormsModule in our AppModule on app.module.ts
        import { ReactiveFormsModule } from '@angular/forms';
        import { NgbModule } from '@ng-bootstrap/ng-bootstrap';

        @NgModule({
        imports: [
            // ...
            ReactiveFormsModule,
            NgbModule
        ],
        })

II. Debugging with Angular 9 Ivy
    Another big improvement introduced in Angular 9 and Angular Ivy is the debugging experience. The compiler now can detect more errors and throw them in a more “readable” fashion.

    1. activate template checking in tsconfig.json
    {
        // ...
        "angularCompilerOptions": {
            "fullTemplateTypeCheck": true,
            "strictInjectionParameters": true,
            "strictTemplates": true
        }
    }   
    => This type checking will allow us to prevent typos and the incorrect usage of TypeScript types.

III. Angular Ivy Validation for @Input()

    1. add @Input() input_Name: string; into component(another appComponent)
    2. and bind it in app.component.html:
        <component_name [input_Name]="title"></component_name>
    3. and then change app.component.ts
        title = null;
    => Error:
        Type 'null' is not assignable to type 'string'.
           <app-tv-rating-form [input_Name]="title"></app-tv-rating-form>
    => Fix:
        The right way to fix this, though, would be to make title on the form nullable:
            @Input() input_Name: string | null ;
IV. The Expression Changed AfterIt Has Been Checked Error in Angular 9 Ivy
    One of the most dreaded errors in Angular development is the ExpressionChangedAfterItHasBeenCheckedError. Thankfully, Ivy outputs the error in a clearer way, making it easier to find where the problem comes from.
    So, let’s introduce an ExpressionChangedAfterItHasBeenCheckedError error. To do that, first, we’ll generate a service:

    1. generate service 
        ng generate service service_Name
        ex: ng generate service title
    2. add a BehaviorSubject, and methods to access the Observable and to emit a new value.(In service)
        export class TitleService {
            private bs = new BehaviorSubject < string > ('');
            constructor() {}
            get title$() {
                return this.bs.asObservable();
            }
            update(title: string) {
                this.bs.next(title);
            }
        }
    3. add this to app.component.html
        <!-- ... -->
        <div class="col-6">
            <h2>
            {{title$ | async}}
            </h2>
            <app-tv-rating-form [title]="title"></app-tv-rating-form>
        </div>
    4. in app.component.ts, we’ll inject the TitleService:
        // ...
        title$: Observable < string > ;

        constructor(
            private titleSvc: TitleService
        ) {}

        ngOnInit() {
            this.title$ = this.titleSvc.title$;
        }
        // ...
    5. in tv-rating-form.component.ts, 
        we’ll inject TitleService and update the title of the AppComponent, 
        which will throw an ExpressionChangedAfterItHasBeenCheckedError error.
    => Error:
        ExpressionChangedAfterItHasBeenCheckedError: 
            Expression has changed after it was checked. 
            Previous value: 'undefined'. Current value: 'new title!'. 
            It seems like the view has been created after its parent 
            and its children have been dirty checked. 
            Has it been created in a change detection hook?
    => Fix:
        wrapping the service call with setTimeout
            setTimeout(() => {
                this.titleSvc.update('new title!');
            });
    To understand why the ExpressionChangedAfterItHasBeenCheckedError error 
    happens and explore other possibilities, 
    go to 'https://indepth.dev/everything-you-need-to-know-about-the-expressionchangedafterithasbeencheckederror-error/' 
    on the topic is worth reading.

    Angular Ivy allows us to have errors presented in a clearer way 
    and helps enforce TypeScript typing in our code. 
    In the following section, we’ll cover some common scenarios 
    where we’ll take advantage of Ivy and debugging.

V. Saving Data in a Database
    1. create a Firebase Project. 
    Then, we’ll install the required dependencies.
        npm install @angular/fire firebase
    2. In the Firebase Console’s project settings, 
    we’ll get its configuration and add them to environment.ts 
    and environment.prod.ts:
        export const environment = {
            // ...
            firebase: {
                apiKey: '{your-api-key}',
                authDomain: '{your-project-id}.firebaseapp.com',
                databaseURL: 'https://{your-project-id}.firebaseio.com',
                projectId: '{your-project-id}',
                storageBucket: '{your-project-id}.appspot.com',
                messagingSenderId: '{your-messaging-id}',
                appId: '{your-app-id}'
            }
        };
    3. import the necessary modules in app.module.ts:
        import { AngularFireModule } from '@angular/fire';
        import { AngularFirestoreModule } from '@angular/fire/firestore';
        import { environment } from '../environments/environment';

        @NgModule({
            // ...
            imports: [
                // ...
                AngularFireModule.initializeApp(environment.firebase),
                AngularFirestoreModule,
            ],
            // ...
        })
    4. in tv-rating-form.component.ts, 
    we’ll inject the AngularFirestore service and save a new rating 
    on form submission:
        import { AngularFirestore } from '@angular/fire/firestore';

        export class TvRatingFormComponent implements OnInit {
            constructor(
                // ...
                private af: AngularFirestore,
            ) { }
            async submit(event: any) {
                this.form.disable();
                await this.af.collection('ratings').add(this.form.value);
                this.form.enable();
                this.form.reset();
            }
        }
    5. list all the ratings into AppComponent. 
    in app.component.ts, we’ll get the data from the collection:
        import { AngularFirestore } from '@angular/fire/firestore';

        export class AppComponent implements OnInit {
            // ... 
            ratings$: Observable<any>;

            constructor(
                // ...
                private af: AngularFirestore
            ) { }

            ngOnInit() {
                // ...
                this.ratings$ = this.af.collection('ratings').valueChanges();
            }
        }
    6. in app.component.html, we’ll add a list of ratings:
        <div class="container">
            <div class="row">
                // ...
                <div class="col-6">
                <div>
                    <p *ngFor="let rating of ratings$ | async">
                    {{rating.tvShow}} ({{rating.rating}})
                    </p>
                </div>
                </div>
            </div>
        </div>


performance
    https://blog.mgechev.com/2016/08/14/ahead-of-time-compilation-angular-offline-precompilation/
    https://techtalk.vn/blog/posts/angular2-cai-thien-toc-do-cua-mot-ung-dung-angular-voi-lazyloading-and-preloading